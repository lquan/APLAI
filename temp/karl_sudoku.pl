:- lib(ic).
:- import alldifferent/1 from ic_global.

los_op(P):-
		transpose(P,C),
		sudoku(P,C),
		%toon_bord(P)
		labeling(P)
	.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
%[[1,2],[3,4],[5,6]] >>> [[1,3,5],[2,4,5]]
%----------------------------------
%- transpose(+Matrix, ?Transpose) -
%----------------------------------
transpose([], []).
transpose([F|Fs], Ts) :-
		transpose(F, [F|Fs], Ts)
	.

%----------------------------------------
%- transpose(+Rox, +Matrix, ?Transpose) -
%----------------------------------------	
transpose([], _, []).
transpose([_|RestInRow], Matrix, [Ts|Tss]) :-	%RestInRow wordt enkel gebruikt als indexcheck voor basiscase
        lists_firsts_rests(Matrix, Ts, Ms1),	%Ms1 = Matrix zonder 1e Kolom
        transpose(RestInRow, Ms1, Tss)
	.

%--------------------------------------------------------------
%- lists_firsts_rests(+Matrix, ?TransposeColumn, ?RestMatrix) -
%--------------------------------------------------------------
lists_firsts_rests([], [], []).
lists_firsts_rests([[F|Os]|Rest], [F|Fs], [Os|Oss]) :-
        lists_firsts_rests(Rest, Fs, Oss)
	.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%	
	
	
toon_bord(Rows) :-
	forall(member(Row,Rows),(
			forall(member(R,Row),(
					write(' '), write(R)
				)
			),
			nl
		)
	).
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

sudoku(Rows,Cols) :-
		[[Rows]] :: 1..9,
		[[Cols]] :: 1..9,
		constraints(Rows,Cols),
		search(Rows)
	.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
constraints([],[]).
constraints([R|Rows],[C|Cols]) :-
		%R :: 1..9,
		%C :: 1..9,
		alldifferent(R),
		alldifferent(C),
		constraints(Rows,Cols)
	.
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

search(_).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/*

solve(P) :-
	%dim(P,[9,9]), % dim = 9*9
	constraints(P)
	%,search(P)
	.

constraints(P) :-
	[[P]] :: 1..9,
	checkRows(P),
	checkCols(P),
	checkCubes(P)
	.

checkRows([]).
checkRows([Row|Rest]) :-
	%[Row] :: 1..9,	
	alldifferent(Row),
	checkRows(Rest).

checkCols([]).
checkCols([[Col|OtherCols]]) :-
%	alldifferent(Col),
	write('t') %,
%	checkCols(OtherCols)
	.
	
checkCubes(_).

search(P) :-
	( foreachelem(Col,P)
	do value_row(Col)
	).

value_row(Row) :-
	( foreachelem(Col,Row)
	do select_val(1,9,Col)
	).
%select_val2(Min,Max,H),
%select_val(Min,Max,T).	

select_val(Min,Max,Val) :- Min == Max, Val is Min.
select_val(Min,Max,Val) :-
	Min < Max,
	Min1 is Min+1,
	select_val(Min1, Max, Val).
*/

puzzles(P) :- medium(P).
puzzles(P) :- difficult(P).
puzzles(P) :- verydifficult(P).
puzzles(P) :- expert(P).
puzzles(P) :- lambda(P).
puzzles(P) :- hard17(P).
puzzles(P) :- symme(P).
puzzles(P) :- eastermonster(P).
puzzles(P) :- tarek_052(P).
puzzles(P) :- goldennugget(P).
puzzles(P) :- coloin(P).
puzzles(P) :- hardest(P).
puzzles(P) :- extra1(P).
puzzles(P) :- extra2(P).
puzzles(P) :- extra3(P).
puzzles(P) :- extra4(P).

	
medium(P) :- P = 
	[[_,4,_,6,_,_,_,_,_],
	[2,_,_,_,_,7,9,4,6],
	[_,_,8,_,3,9,_,5,_],

	[_,3,_,_,_,_,8,_,2],
	[_,_,9,_,_,_,6,_,_],
	[_,5,2,_,_,_,_,_,_],
	
	[_,_,_,_,9,3,_,_,_],
	[_,_,_,_,_,4,7,3,_],
	[_,_,4,8,7,_,_,_,9]].


difficult(P) :- P = 
	[[5,9,_,_,6,_,_,_,3],
	[_,_,_,8,_,5,_,_,6],
	[8,6,_,9,3,2,5,4,7],

	[_,_,_,_,_,_,_,_,_],
	[_,_,_,_,2,_,4,_,5],
	[_,_,_,3,9,_,_,7,_],
	
	[_,_,_,_,_,_,9,_,8],
	[3,_,_,2,_,_,_,6,_],
	[_,7,_,4,8,9,_,3,_]].

verydifficult(P) :- P = 
	[[_,_,8,7,_,_,_,_,6],
	[4,_,_,_,_,9,_,_,_],
	[_,_,_,5,4,6,9,_,_],

	[_,_,_,_,_,3,_,5,_],
	[_,_,3,_,_,7,6,_,_],
	[_,_,_,_,_,_,_,8,9],
	
	[_,7,_,4,_,2,_,_,5],
	[8,_,_,9,_,5,_,2,3],
	[2,_,9,3,_,8,7,6,_]].


expert(P) :- P = 
	[[_,_,_,_,_,_,8,_,5],
	[3,_,_,_,2,6,_,_,7],
	[4,_,_,_,_,3,_,_,_],

	[_,_,_,_,_,8,_,_,_],
	[7,_,_,_,9,_,_,_,8],
	[9,_,8,3,_,4,_,6,_],
	
	[2,3,_,9,_,_,_,_,_],
	[_,_,_,_,_,_,_,9,6],
	[_,6,_,2,_,_,_,5,_]].

lambda(P) :- P =
        [[1,_,_, _,_,_, _,_,_],
         [_,_,2, 7,4,_, _,_,_],
         [_,_,_, 5,_,_, _,_,4],

         [_,3,_, _,_,_, _,_,_],
         [7,5,_, _,_,_, _,_,_],
         [_,_,_, _,_,9, 6,_,_],

         [_,4,_, _,_,6, _,_,_],
         [_,_,_, _,_,_, _,7,1],
         [_,_,_, _,_,1, _,3,_]].


hard17(P) :- P = 
	[[_,_,2,_,9,_,3,_,_],
	[8,_,5,_,_,_,_,_,_],
	[1,_,_,_,_,_,_,_,_],

	[_,9,_,_,6,_,_,4,_],
	[_,_,_,_,_,_,_,5,8],
	[_,_,_,_,_,_,_,_,1],
	
	[_,7,_,_,_,_,2,_,_],
	[3,_,_,5,_,_,_,_,_],
	[_,_,_,1,_,_,_,_,_]].

symme(P) :- P = 
	[[3,_,_,_,_,_,_,_,4],
	[_,8,_,2,_,_,_,7,_],
	[_,_,6,_,_,_,5,_,_],

	[_,1,_,9,_,8,_,_,_],
	[_,_,_,_,6,_,_,_,_],
	[_,_,_,_,_,7,_,2,_],
	
	[_,_,5,_,_,_,6,_,_],
	[_,9,_,_,_,1,_,8,_],
	[4,_,_,_,_,_,_,_,3]].

eastermonster(P) :- P = 
	[[1,_,_,_,_,_,_,_,2],
	[_,9,_,4,_,_,_,5,_],
	[_,_,6,_,_,_,7,_,_],

	[_,5,_,9,_,3,_,_,_],
	[_,_,_,_,7,_,_,_,_],
	[_,_,_,8,5,_,_,4,_],
	
	[7,_,_,_,_,_,6,_,_],
	[_,3,_,_,_,9,_,8,_],
	[_,_,2,_,_,_,_,_,1]].


tarek_052(P) :- P = 
	[[_,_,1,_,_,4,_,_,_],
	[_,_,_,_,6,_,3,_,5],
	[_,_,_,9,_,_,_,_,_],

	[8,_,_,_,_,_,7,_,3],
	[_,_,_,_,_,_,_,2,8],
	[5,_,_,_,7,_,6,_,_],

	[3,_,_,_,8,_,_,_,6],
	[_,_,9,2,_,_,_,_,_],
	[_,4,_,_,_,1,_,_,_]].

goldennugget(P) :- P = 
	[[_,_,_,_,_,_,_,3,9],
	[_,_,_,_,_,1,_,_,5],
	[_,_,3,_,5,_,8,_,_],

	[_,_,8,_,9,_,_,_,6],
	[_,7,_,_,_,2,_,_,_],
	[1,_,_,4,_,_,_,_,_],
	
	[_,_,9,_,8,_,_,5,_],
	[_,2,_,_,_,_,6,_,_],
	[4,_,_,7,_,_,_,_,_]].

coloin(P) :- P = 
	[[_,2,_,4,_,3,7,_,_],
	[_,_,_,_,_,_,_,3,2],
	[_,_,_,_,_,_,_,_,4],

	[_,4,_,2,_,_,_,7,_],
	[8,_,_,_,5,_,_,_,_],
	[_,_,_,_,_,1,_,_,_],
	
	[5,_,_,_,_,_,9,_,_],
	[_,3,_,9,_,_,_,_,7],
	[_,_,1,_,_,8,6,_,_]].


hardest(P) :- P = 
       [[1,_,_,_,_,_,_,_,2],
        [_,9,_,4,_,_,_,5,_],
        [_,_,6,_,_,_,7,_,_],

        [_,5,_,9,_,3,_,_,_],
        [_,_,_,_,7,_,_,_,_],
        [_,_,_,8,5,_,_,4,_],
        
        [7,_,_,_,_,_,6,_,_],
        [_,3,_,_,_,9,_,8,_],
        [_,_,2,_,_,_,_,_,1]].

extra1(P) :- P = [
		  [_, 9, 8, _, _, _, _, _, _],
		  [_, _, _, _, 7, _, _, _, _],
    [_, _, _, _, 1, 5, _, _, _],
    [1, _, _, _, _, _, _, _, _],
    [_, _, _, 2, _, _, _, _, 9],
    [_, _, _, 9, _, 6, _, 8, 2],
    [_, _, _, _, _, _, _, 3, _],
    [5, _, 1, _, _, _, _, _, _],
    [_, _, _, 4, _, _, _, 2, _]].

extra2(P) :- P = [ 
    [_, _, 1, _, 2, _, 7, _, _],
    [_, 5, _, _, _, _, _, 9, _],
    [_, _, _, 4, _, _, _, _, _],
    [_, 8, _, _, _, 5, _, _, _],
    [_, 9, _, _, _, _, _, _, _],
    [_, _, _, _, 6, _, _, _, 2],
    [_, _, 2, _, _, _, _, _, _],
    [_, _, 6, _, _, _, _, _, 5],
    [_, _, _, _, _, 9, _, 8, 3]].


extra3(P) :-  P = [
    [1, _, _, _, _, _, _, _, _],
    [_, _, 2, 7, 4, _, _, _, _],
    [_, _, _, 5, _, _, _, _, 4],
    [_, 3, _, _, _, _, _, _, _],
    [7, 5, _, _, _, _, _, _, _],
    [_, _, _, _, _, 9, 6, _, _],
    [_, 4, _, _, _, 6, _, _, _],
    [_, _, _, _, _, _, _, 7, 1],
    [_, _, _, _, _, 1, _, 3, _]].

extra4(P) :- P = [
    [1, _, 4, _, _, _, _, _, _],
    [_, _, 2, 7, 4, _, _, _, _],
    [_, _, _, 5, _, _, _, _, _],
    [_, 3, _, _, _, _, _, _, _],
    [7, 5, _, _, _, _, _, _, _],
    [_, _, _, _, _, 9, 6, _, _],
    [_, 4, _, _, _, 6, _, _, _],
    [_, _, _, _, _, _, _, 7, 1],
    [_, _, _, _, _, 1, _, 3, _]].





/*
veryeasy(P) :- P = 
	[[_,_,_,_,_,_,_,_,_],
	[_,_,_,_,_,_,_,_,_],
	[_,_,_,_,_,_,_,_,_],

	[_,_,_,_,_,_,_,_,_],
	[_,_,_,_,_,_,_,_,_],
	[_,_,_,_,_,_,_,_,_],
	
	[_,_,_,_,_,_,_,_,_],
	[_,_,_,_,_,_,_,_,_],
	[_,_,_,_,_,_,_,_,_]].
*/

